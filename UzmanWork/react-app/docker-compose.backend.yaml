version: "3.9"

services:
  backend:
    volumes:
      - static_clips:/app/backend/static/clips
      - ./profile_traces:/app/profile_traces
    environment:
      BACKEND_APP_NAME: "backend.main:app"
      API_TARGET: "app"
    init: true
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/monitor/backend_health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    cap_add:
      - SYS_PTRACE

  backend_edge:
    volumes:
      - ./profile_traces:/app/profile_traces
    environment:
      BACKEND_APP_NAME: "backend.main_edge:app"
      API_TARGET: "edge"
    init: true
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8200/monitor/edge_health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    cap_add:
      - SYS_PTRACE

  nginx:
    image: nginx:1.25.1-alpine3.17-slim
    init: true
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend
    ports:
      - 8000:8000

  telegraf:
    image: telegraf:1.29.2
    # this is needed as telegraf uses telegraf user by default
    # we are fine in running it as root.
    user: root
    entrypoint: "telegraf"
    volumes:
      - ./telegraf/logs:/app/telegraf/logs
      # This is needed so telegraf can read the docker stats
      - /var/run/docker.sock:/var/run/docker.sock
      - ./telegraf/telegraf.conf:/etc/telegraf/telegraf.conf
    ports:
      - "9000:9000/udp"
      - "9000:9000/tcp"
    init: true
    mem_limit: 1g

  message_queue:
    image: rabbitmq:3.11.3-management
    hostname: rabbitmq
    ports:
      - 5672:5672
      - 15672:15672
    init: true
    mem_limit: 1g

  task_worker:
    depends_on:
      - message_queue
    environment:
      API_TARGET: "task-worker"
    init: true
    volumes:
      - static_clips:/app/backend/static/clips
    deploy:
      resources:
        limits:
          cpus: "1.2"

  task_scheduler:
    depends_on:
      - message_queue
    environment:
      API_TARGET: "task-scheduler"
    command:
      [
        "celery",
        "-A",
        "backend.task_worker.worker.celery_app",
        "--config=backend.task_worker.celeryconfig",
        "beat",
        "--loglevel=info",
      ]
    init: true
    deploy:
      resources:
        limits:
          cpus: "1.2"


  task_monitor:
    depends_on:
      - message_queue
    command:
      [
        "celery",
        "-A",
        "backend.task_worker.worker.celery_app",
        "flower",
        "--port=5566",
      ]
    init: true
    deploy:
      resources:
        limits:
          cpus: "1.2"
    ports:
      - 5566:5566

volumes:
  static_clips:
