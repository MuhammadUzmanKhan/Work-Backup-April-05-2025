"""add line crossing detection

Revision ID: f1f1a89b8cb4
Revises: 1735facaeccc
Create Date: 2024-03-20 15:31:51.608397

"""

from alembic import op

CHECK_LINE_INTERSECTION_WITH_DIRECTION_FUNCTION = """
CREATE OR REPLACE FUNCTION check_line_intersection_with_direction(
    ref_x1 FLOAT, ref_y1 FLOAT, -- Coordinates of the first point of reference line
    ref_x2 FLOAT, ref_y2 FLOAT, -- Coordinates of the second point of reference line
    cand_x1 FLOAT, cand_y1 FLOAT, -- Coordinates of the first point of candidate line
    cand_x2 FLOAT, cand_y2 FLOAT,  -- Coordinates of the second point of candidate line
    given_direction text -- The direction of the intersection
) RETURNS boolean AS
$$
DECLARE
    denominator FLOAT;
    numeratorA FLOAT;
    numeratorB FLOAT;
    ua FLOAT;
    ub FLOAT;
    cross_product numeric;
BEGIN
    -- Calculate the denominator
    denominator := ((cand_y2 - cand_y1) * (ref_x2 - ref_x1)) -
                   ((cand_x2 - cand_x1) * (ref_y2 - ref_y1));

    -- Check if the lines are valid
    IF denominator IS NULL THEN
        RETURN false; -- Lines are invalid and won't intersect
    END IF;

    -- Check if the lines are parallel
    IF denominator = 0 THEN
        RETURN false; -- Lines are parallel and won't intersect
    END IF;

    -- Calculate numerators
    numeratorA := ((cand_x2 - cand_x1) * (ref_y1 - cand_y1)) -
                  ((cand_y2 - cand_y1) * (ref_x1 - cand_x1));
    numeratorB := ((ref_x2 - ref_x1) * (ref_y1 - cand_y1)) -
                  ((ref_y2 - ref_y1) * (ref_x1 - cand_x1));

    -- Calculate the intersection points
    ua := numeratorA / denominator;
    ub := numeratorB / denominator;

    -- Check if the intersection points are within the line segments
    IF NOT (ua >= 0 AND ua <= 1 AND ub >= 0 AND ub <= 1) THEN
        RETURN false; -- Lines intersect outside their segments
    END IF;

    -- Determine intersection direction based on given_direction
    IF given_direction = 'both' THEN
        RETURN true;
    ELSE

        -- Calculate the cross product to determine the intersection direction
        cross_product := (ref_x2 - ref_x1) * (cand_y2 - cand_y1) -
            (ref_y2 - ref_y1) * (cand_x2 - cand_x1);

        -- Determine the intersection direction based on the cross product
        IF cross_product > 0 THEN
            RETURN given_direction = 'right';
        ELSIF cross_product < 0 THEN
            RETURN given_direction = 'left';
        ELSE
            RETURN false; -- The candidate line is collinear with the reference line
        END IF;
    END IF;
END;
$$ LANGUAGE plpgsql;
"""

# revision identifiers, used by Alembic.
revision = "f1f1a89b8cb4"
down_revision = "1735facaeccc"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Create custom SQL function
    op.execute(CHECK_LINE_INTERSECTION_WITH_DIRECTION_FUNCTION)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop custom SQL function
    op.execute("DROP FUNCTION IF EXISTS check_line_intersection_with_direction")
    # ### end Alembic commands ###
