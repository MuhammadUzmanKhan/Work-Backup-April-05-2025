"""First revision

Revision ID: e512f75fc776
Revises:
Create Date: 2023-03-01 15:13:14.847299

"""

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "e512f75fc776"
down_revision = None
branch_labels = None
depends_on = None

TRIGGER_TYPE_VALUES = ["DO_NOT_ENTER", "SHORT_STICK_AROUND"]
DETECTION_OBJECT_TYPE_VALUES = [
    "INVALID",
    "PERSON",
    "BICYCLE",
    "CAR",
    "MOTORCYCLE",
    "AIRPLANE",
    "BUS",
    "TRAIN",
    "TRUCK",
    "BOAT",
    "TRAFFIC_LIGHT",
    "FIRE_HYDRANT",
    "STOP_SIGN",
    "PARKING_METER",
    "BENCH",
    "BIRD",
    "CAT",
    "DOG",
    "HORSE",
    "SHEEP",
    "COW",
    "ELEPHANT",
    "BEAR",
    "ZEBRA",
    "GIRAFFE",
    "BACKPACK",
    "UMBRELLA",
    "HANDBAG",
    "TIE",
    "SUITCASE",
    "FRISBEE",
    "SKIS",
    "SNOWBOARD",
    "SPORTS_BALL",
    "KITE",
    "BASEBALL_BAT",
    "BASEBALL_GLOVE",
    "SKATEBOARD",
    "SURFBOARD",
    "TENNIS_RACKET",
    "BOTTLE",
    "WINE_GLASS",
    "CUP",
    "FORK",
    "KNIFE",
    "SPOON",
    "BOWL",
    "BANANA",
    "APPLE",
    "SANDWICH",
    "ORANGE",
    "BROCCOLI",
    "CARROT",
    "HOT_DOG",
    "PIZZA",
    "DONUT",
    "CAKE",
    "CHAIR",
    "COUCH",
    "POTTED_PLANT",
    "BED",
    "DINING_TABLE",
    "TOILET",
    "TV",
    "LAPTOP",
    "MOUSE",
    "REMOTE",
    "KEYBOARD",
    "CELL_PHONE",
    "MICROWAVE",
    "OVEN",
    "TOASTER",
    "SINK",
    "REFRIGERATOR",
    "BOOK",
    "CLOCK",
    "VASE",
    "SCISSORS",
    "TEDDY_BEAR",
    "HAIR_DRIER",
    "TOOTHBRUSH",
    "FAKE_OBJ",
]

THUMBNAIL_TYPE_VALUES = ["THUMBNAIL", "TIMELAPSE"]
DAYS_OF_WEEK_VALUES = [
    "MONDAY",
    "TUESDAY",
    "WEDNESDAY",
    "THURSDAY",
    "FRIDAY",
    "SATURDAY",
    "SUNDAY",
]


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    trigger_type = sa.Enum(*TRIGGER_TYPE_VALUES, name="triggertype")
    detection_object_type = sa.Enum(
        *DETECTION_OBJECT_TYPE_VALUES, name="detectionobjecttype"
    )
    thumbnail_types = sa.Enum(*THUMBNAIL_TYPE_VALUES, name="thumbnailtype")
    days_of_week_type = sa.Enum(*DAYS_OF_WEEK_VALUES, name="dayofweek")

    op.create_table(
        "organizations",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("tenant", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("tenant"),
    )
    op.create_table(
        "products",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "shared_videos",
        sa.Column("unique_hash", sa.String(), nullable=False),
        sa.Column("live_stream_name", sa.String(), nullable=False),
        sa.Column("mac_address", sa.String(), nullable=False),
        sa.Column("start_time", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("end_time", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("expiration_time", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("email_address", sa.String(), nullable=True),
        sa.Column("phone_number", sa.String(), nullable=True),
        sa.Column("user_name", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("unique_hash"),
    )
    op.create_table(
        "text_searches",
        sa.Column("request_uuid", sa.String(), nullable=False),
        sa.Column("stream_name", sa.String(), nullable=False),
        sa.Column("text_query", sa.String(), nullable=False),
        sa.Column(
            "ranked_timestamps",
            postgresql.ARRAY(sa.TIMESTAMP(timezone=True)),
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("request_uuid"),
    )
    op.create_table(
        "user_alert_last_run",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("last_run", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "user_alert_trigger_types",
        sa.Column("trigger_type", trigger_type, nullable=False),
        sa.Column("min_active_duration_s", sa.Integer(), nullable=False),
        sa.Column("max_idle_duration_s", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("trigger_type"),
    )
    op.create_table(
        "allowed_products",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("org_id", sa.Integer(), nullable=False),
        sa.Column("product_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["org_id"], ["organizations.id"]),
        sa.ForeignKeyConstraint(["product_id"], ["products.id"]),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "camera_groups",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("owner_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["owner_id"], ["organizations.id"]),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "locations",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("owner_id", sa.Integer(), nullable=False),
        sa.Column("address", sa.String(), nullable=False),
        sa.Column("address_lat", sa.Float(), nullable=True),
        sa.Column("address_lon", sa.Float(), nullable=True),
        sa.ForeignKeyConstraint(["owner_id"], ["organizations.id"]),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "nvrs",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("uuid", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=True),
        sa.Column("location_id", sa.Integer(), nullable=True),
        sa.Column("last_seen_time", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("timezone", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(["location_id"], ["locations.id"]),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("uuid"),
    )
    op.create_table(
        "cameras",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("mac_address", sa.String(), nullable=False),
        sa.Column("source", sa.String(), nullable=False),
        sa.Column("camera_group_id", sa.Integer(), nullable=True),
        sa.Column("last_discovery_time", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("is_enabled", sa.Boolean(), nullable=False),
        sa.Column("nvr_uuid", sa.String(), nullable=False),
        sa.Column("vendor", sa.String(), nullable=False),
        sa.Column("ip", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(["camera_group_id"], ["camera_groups.id"]),
        sa.ForeignKeyConstraint(["nvr_uuid"], ["nvrs.uuid"]),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("mac_address"),
    )
    op.create_table(
        "perception_object_events",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("time", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("mac_address", sa.String(), nullable=False),
        sa.Column("object_type", detection_object_type, nullable=False),
        sa.Column("x_min", sa.Float(), nullable=False),
        sa.Column("y_min", sa.Float(), nullable=False),
        sa.Column("x_max", sa.Float(), nullable=False),
        sa.Column("y_max", sa.Float(), nullable=False),
        sa.Column("confidence", sa.Float(), nullable=False),
        sa.Column("is_moving", sa.Boolean(), nullable=False),
        sa.Column("track_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["mac_address"], ["cameras.mac_address"]),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "stream_data_availabilities",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("camera_id", sa.Integer(), nullable=False),
        sa.Column("start_timestamp", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("availability_duration_s", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["camera_id"], ["cameras.id"]),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "thumbnails",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("timestamp", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("camera_mac_address", sa.String(), nullable=False),
        sa.Column("s3_path", sa.String(), nullable=False),
        sa.Column("thumbnail_type", thumbnail_types, nullable=False),
        sa.ForeignKeyConstraint(["camera_mac_address"], ["cameras.mac_address"]),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "user_alert_settings",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(), nullable=True),
        sa.Column("camera_mac_address", sa.String(), nullable=False),
        sa.Column(
            "detection_object_types",
            postgresql.ARRAY(detection_object_type, dimensions=1),
            nullable=False,
        ),
        sa.Column(
            "roi_polygon", postgresql.ARRAY(sa.Float(), dimensions=2), nullable=False
        ),
        sa.Column(
            "days_of_week",
            postgresql.ARRAY(days_of_week_type, dimensions=1),
            nullable=False,
        ),
        sa.Column("start_time", sa.TIME(timezone=True), nullable=True),
        sa.Column("end_time", sa.TIME(timezone=True), nullable=True),
        sa.Column("email", sa.String(), nullable=True),
        sa.Column("phone", sa.String(), nullable=True),
        sa.Column("enabled", sa.Boolean(), nullable=False),
        sa.Column("creator_name", sa.String(), nullable=True),
        sa.Column("creation_time", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("trigger_type", trigger_type, nullable=True),
        sa.ForeignKeyConstraint(["camera_mac_address"], ["cameras.mac_address"]),
        sa.ForeignKeyConstraint(
            ["trigger_type"], ["user_alert_trigger_types.trigger_type"]
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "user_alerts",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("setting_id", sa.Integer(), nullable=False),
        sa.Column("start_time", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("end_time", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("alert_sent_time", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(["setting_id"], ["user_alert_settings.id"]),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("user_alerts")
    op.drop_table("user_alert_settings")
    op.drop_table("thumbnails")
    op.drop_table("stream_data_availabilities")
    op.drop_table("perception_object_events")
    op.drop_table("cameras")
    op.drop_table("nvrs")
    op.drop_table("locations")
    op.drop_table("camera_groups")
    op.drop_table("allowed_products")
    op.drop_table("user_alert_trigger_types")
    op.drop_table("user_alert_last_run")
    op.drop_table("text_searches")
    op.drop_table("shared_videos")
    op.drop_table("products")
    op.drop_table("organizations")

    # See https://stackoverflow.com/a/65173731 for deleting enum types
    trigger_type = sa.Enum(*TRIGGER_TYPE_VALUES, name="triggertype")
    trigger_type.drop(op.get_bind())
    detection_object_type = sa.Enum(
        *DETECTION_OBJECT_TYPE_VALUES, name="detectionobjecttype"
    )
    detection_object_type.drop(op.get_bind())
    thumbnail_types = sa.Enum(*THUMBNAIL_TYPE_VALUES, name="thumbnailtype")
    thumbnail_types.drop(op.get_bind())
    days_of_week_type = sa.Enum(*DAYS_OF_WEEK_VALUES, name="dayofweek")
    days_of_week_type.drop(op.get_bind())
    # ### end Alembic commands ###
