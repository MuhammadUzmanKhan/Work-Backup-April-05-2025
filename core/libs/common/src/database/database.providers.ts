import * as pg from 'pg';
import { Provider } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { Sequelize } from 'sequelize-typescript';
import {
  User,
  Company,
  Event,
  InformationRequest,
  ContactDirectory,
  MessageSetting,
  Day,
  IncidentMessageCenter,
  Image,
  ChangeLog,
  Comment,
  EventUser,
  EventContact,
  EventSubtasks,
  UserToken,
  UserPins,
  Source,
  EventSource,
  EventIncidentDivision,
  IncidentDivision,
  IncidentType,
  IncidentZone,
  EventIncidentType,
  MobileIncidentInbox,
  PriorityGuide,
  PresetMessage,
  MessageGroup,
  Scan,
  Department,
  EventDepartment,
  Inventory,
  EventInventory,
  VendorRole,
  Role,
  Permission,
  RolePermission,
  DepartmentUsers,
  UserIncidentDivision,
  IncidentDepartmentUsers,
  UserIncidents,
  Incident,
  UserCompanyRole,
  CompanyContact,
  OptoutNumbers,
  InventoryType,
  InventoryTypeCategory,
  EventInventoryType,
  InventoryZone,
  InventoryInventoryZone,
  UserShift,
  Shift,
  StatusChange,
  Route,
  DayRoute,
  RouteShift,
  Alert,
  ReservationType,
  InventoryZoneReservationType,
  FuelType,
  EventInventoryTypeCategory,
  Filter,
  Message,
  Reservation,
  Camper,
  CamperReservation,
  Location,
  IncidentForm,
  EventCad,
  ShiftTime,
  Vendor,
  VendorUsers,
  EventVendors,
  UserInventory,
  Assignment,
  LostAndFound,
  ServiceRequest,
  UserVendorRole,
  MessageGroupUsers,
  UserMessageConfig,
  UserRoute,
  ReservationStatistic,
  HourEstimation,
  RidershipStatistics,
  GlobalIncident,
  ReferenceMap,
  PointOfInterest,
  StaffEventSchedule,
  PointOfInterestType,
  Cad,
  Task,
  TaskCategory,
  TaskList,
  TaskTaskCategory,
  UserTask,
  EventDepartmentUser,
  TicketClearTemplate,
  Zone,
  PolynomialPoint,
  CustomDirection,
  IncidentMultipleDivision,
  ResolvedIncidentNote,
  CameraZone,
  PermissionModule,
  Note,
  PersonInvolved,
  Representative,
  Witness,
  AuditShift,
  AuditStaff,
  VendorPosition,
  Template,
  ScanCount,
  Region,
  UserCompanyRoleRegion,
  ServiceRequestType,
  LiveVideo,
  Damage,
  InventoryDamage,
  WeatherProvider,
  CompanyWeatherProvider,
  WeatherRule,
  Conversation,
  UserConversationConfig,
  Area,
  DotMapDot,
  Position,
  PositionName,
  DotShift,
  DotMapVendor,
  DotMapShift,
  BaseDeployment,
  TaskListOrder,
  Notification,
  UserNotification,
  NotificationSetting,
  NotificationSettingType,
  CadType,
  CommentMention,
  IncidentTypeTranslation,
  AuditNote,
  IncidentCommentStatus,
  LegalGroup,
  Chat,
  TwilioNumber,
  EventTwilioNumbers,
  Preset,
} from '../models';
import {
  getAllPinnedEventsData,
  getComparisonEventsData,
  getComparisonEventsLineGraph,
  getComparisonEventsLineGraphAllDaysCount,
  getComparisonEventsLineGraphDays,
  getDepartmentByEventWithUserDivision,
  getEventDepartmentStaff,
  getEventGraphComparison,
  getFormattedDotsAreas,
  getFormattedDotsPositions,
  getIncidentDivisionResolvedTime,
  getIncidentResolvedTime,
  getIncidentResolvedTimeNullZones,
  getIncidentTypeResolvedTime,
  getIncidentZoneResolvedTime,
} from './db-functions';

export const databaseProviders: Provider[] = [
  {
    provide: 'SEQUELIZE',
    useFactory: async (configService: ConfigService) => {
      pg.types.setTypeParser(
        1114,
        (str: string) => new Date(str.split(' ').join('T') + 'Z'),
      );
      const sequelize = new Sequelize({
        dialect: 'postgres',
        replication: {
          read: [
            {
              host: configService.get('DB_READER'),
            },
          ],
          write: {
            host: configService.get('DB_HOST'),
          },
        },
        pool: {
          max: 20,
          idle: 30000,
          acquire: 60000,
        },
        username: configService.get('DB_USERNAME'),
        password: configService.get('DB_PASSWORD'),
        database: configService.get('DB_DATABASE'),
        dialectModule: pg,
        models: [
          User,
          Company,
          Event,
          InformationRequest,
          EventUser,
          EventContact,
          ContactDirectory,
          MessageSetting,
          Day,
          IncidentMessageCenter,
          Image,
          EventSubtasks,
          ChangeLog,
          Comment,
          UserToken,
          UserPins,
          Source,
          EventSource,
          IncidentDivision,
          EventIncidentDivision,
          IncidentType,
          EventIncidentType,
          IncidentZone,
          MobileIncidentInbox,
          PriorityGuide,
          PresetMessage,
          MessageGroup,
          Scan,
          Department,
          EventDepartment,
          Inventory,
          EventInventory,
          VendorRole,
          Role,
          Permission,
          RolePermission,
          DepartmentUsers,
          UserIncidentDivision,
          IncidentDepartmentUsers,
          UserIncidents,
          Incident,
          UserCompanyRole,
          CompanyContact,
          OptoutNumbers,
          InventoryType,
          InventoryTypeCategory,
          EventInventoryType,
          InventoryZone,
          InventoryInventoryZone,
          UserShift,
          Shift,
          StatusChange,
          Route,
          DayRoute,
          RouteShift,
          Alert,
          ReservationType,
          InventoryZoneReservationType,
          FuelType,
          EventInventoryTypeCategory,
          Filter,
          Message,
          Reservation,
          Camper,
          CamperReservation,
          Location,
          IncidentForm,
          EventCad,
          ShiftTime,
          Vendor,
          VendorUsers,
          EventVendors,
          UserInventory,
          Assignment,
          LostAndFound,
          ServiceRequest,
          UserVendorRole,
          MessageGroupUsers,
          UserMessageConfig,
          UserRoute,
          ReservationStatistic,
          HourEstimation,
          RidershipStatistics,
          GlobalIncident,
          ReferenceMap,
          PointOfInterest,
          StaffEventSchedule,
          PointOfInterestType,
          Cad,
          CadType,
          Task,
          TaskCategory,
          TaskList,
          TaskTaskCategory,
          UserTask,
          EventDepartmentUser,
          TicketClearTemplate,
          Zone,
          PolynomialPoint,
          CustomDirection,
          IncidentMultipleDivision,
          ResolvedIncidentNote,
          CameraZone,
          PermissionModule,
          Note,
          PersonInvolved,
          Representative,
          Witness,
          AuditShift,
          AuditStaff,
          VendorPosition,
          Template,
          ScanCount,
          Region,
          UserCompanyRoleRegion,
          ServiceRequestType,
          LiveVideo,
          Damage,
          InventoryDamage,
          WeatherProvider,
          CompanyWeatherProvider,
          WeatherRule,
          Conversation,
          UserConversationConfig,
          Area,
          DotMapDot,
          Position,
          PositionName,
          DotShift,
          DotMapVendor,
          DotMapShift,
          BaseDeployment,
          TaskListOrder,
          Notification,
          UserNotification,
          NotificationSetting,
          NotificationSettingType,
          CommentMention,
          IncidentTypeTranslation,
          AuditNote,
          IncidentCommentStatus,
          Chat,
          LegalGroup,
          TwilioNumber,
          EventTwilioNumbers,
          Preset,
        ],
        sync: { force: false, alter: false }, // Important
        logging: false,
      });
      if (
        !configService.get('DB_FUNCTIONS') ||
        configService.get('DB_FUNCTIONS') == 'true'
      ) {
        await sequelize.query(getEventDepartmentStaff);
        await sequelize.query(getDepartmentByEventWithUserDivision);
        await sequelize.query(getEventGraphComparison);
        await sequelize.query(getAllPinnedEventsData);
        await sequelize.query(getIncidentTypeResolvedTime);
        await sequelize.query(getIncidentDivisionResolvedTime);
        await sequelize.query(getIncidentZoneResolvedTime);
        await sequelize.query(getIncidentResolvedTimeNullZones);
        await sequelize.query(getComparisonEventsData);
        await sequelize.query(getComparisonEventsLineGraph);
        await sequelize.query(getComparisonEventsLineGraphDays);
        await sequelize.query(getComparisonEventsLineGraphAllDaysCount);
        await sequelize.query(getIncidentResolvedTime);
        await sequelize.query(getFormattedDotsAreas);
        await sequelize.query(getFormattedDotsPositions);
      }

      console.log('DATABASE_CONNECTED');
      return sequelize;
    },
    inject: [ConfigService],
  },
];
