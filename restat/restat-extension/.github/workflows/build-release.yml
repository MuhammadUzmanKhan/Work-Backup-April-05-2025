name: Build and Update Release

on:
  push:
    branches:
      - dev
      - master

jobs:
  build-and-update-release:
    runs-on: ubuntu-latest

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Set environment variables based on branch
        id: set_env
        run: |
          if [ "${{ github.ref_name }}" = "master" ]; then
            echo "VUE_APP_ENV=${{ secrets.PROD_APP_ENV }}" >> $GITHUB_ENV
            echo "VUE_APP_MONGO_URL=${{ secrets.PROD_APP_MONGO_URL }}" >> $GITHUB_ENV
            echo "VUE_APP_BASE_URL=${{ secrets.PROD_APP_BASE_URL }}" >> $GITHUB_ENV
            echo "VUE_APP_AUTH_DOMAIN=${{ secrets.PROD_APP_AUTH_DOMAIN }}" >> $GITHUB_ENV
            echo "VUE_APP_API_KEY=${{ secrets.PROD_APP_API_KEY }}" >> $GITHUB_ENV
            echo "VUE_APP_PROJECT_ID=${{ secrets.PROD_APP_PROJECT_ID }}" >> $GITHUB_ENV
            echo "VUE_APP_STORAGE_BUCKET=${{ secrets.PROD_APP_STORAGE_BUCKET }}" >> $GITHUB_ENV
            echo "VUE_APP_MESSAGING_SENDER_ID=${{ secrets.PROD_APP_MESSAGING_SENDER_ID }}" >> $GITHUB_ENV
            echo "VUE_APP_APP_ID=${{ secrets.PROD_APP_APP_ID }}" >> $GITHUB_ENV
            echo "VUE_APP_MEASUREMENT_ID=${{ secrets.PROD_APP_MEASUREMENT_ID }}" >> $GITHUB_ENV
            echo "VUE_APP_OPEN_CAGE_API_KEY=${{ secrets.VUE_APP_OPEN_CAGE_API_KEY }}" >> $GITHUB_ENV
          elif [ "${{ github.ref_name }}" = "dev" ]; then
            echo "VUE_APP_ENV=${{ secrets.DEV_APP_ENV }}" >> $GITHUB_ENV
            echo "VUE_APP_MONGO_URL=${{ secrets.DEV_APP_MONGO_URL }}" >> $GITHUB_ENV
            echo "VUE_APP_BASE_URL=${{ secrets.DEV_APP_BASE_URL }}" >> $GITHUB_ENV
            echo "VUE_APP_AUTH_DOMAIN=${{ secrets.DEV_APP_AUTH_DOMAIN }}" >> $GITHUB_ENV
            echo "VUE_APP_API_KEY=${{ secrets.DEV_APP_API_KEY }}" >> $GITHUB_ENV
            echo "VUE_APP_PROJECT_ID=${{ secrets.DEV_APP_PROJECT_ID }}" >> $GITHUB_ENV
            echo "VUE_APP_STORAGE_BUCKET=${{ secrets.DEV_APP_STORAGE_BUCKET }}" >> $GITHUB_ENV
            echo "VUE_APP_MESSAGING_SENDER_ID=${{ secrets.DEV_APP_MESSAGING_SENDER_ID }}" >> $GITHUB_ENV
            echo "VUE_APP_APP_ID=${{ secrets.DEV_APP_APP_ID }}" >> $GITHUB_ENV
            echo "VUE_APP_MEASUREMENT_ID=${{ secrets.DEV_APP_MEASUREMENT_ID }}" >> $GITHUB_ENV
            echo "VUE_APP_OPEN_CAGE_API_KEY=${{ secrets.VUE_APP_OPEN_CAGE_API_KEY }}" >> $GITHUB_ENV
          else
            echo "VUE_APP_ENV=${{ secrets.DEV_APP_ENV }}" >> $GITHUB_ENV
            echo "VUE_APP_MONGO_URL=${{ secrets.DEV_APP_MONGO_URL }}" >> $GITHUB_ENV
            echo "VUE_APP_BASE_URL=${{ secrets.DEV_APP_BASE_URL }}" >> $GITHUB_ENV
            echo "VUE_APP_AUTH_DOMAIN=${{ secrets.DEV_APP_AUTH_DOMAIN }}" >> $GITHUB_ENV
            echo "VUE_APP_API_KEY=${{ secrets.DEV_APP_API_KEY }}" >> $GITHUB_ENV
            echo "VUE_APP_PROJECT_ID=${{ secrets.DEV_APP_PROJECT_ID }}" >> $GITHUB_ENV
            echo "VUE_APP_STORAGE_BUCKET=${{ secrets.DEV_APP_STORAGE_BUCKET }}" >> $GITHUB_ENV
            echo "VUE_APP_MESSAGING_SENDER_ID=${{ secrets.DEV_APP_MESSAGING_SENDER_ID }}" >> $GITHUB_ENV
            echo "VUE_APP_APP_ID=${{ secrets.DEV_APP_APP_ID }}" >> $GITHUB_ENV
            echo "VUE_APP_MEASUREMENT_ID=${{ secrets.DEV_APP_MEASUREMENT_ID }}" >> $GITHUB_ENV
            echo "VUE_APP_OPEN_CAGE_API_KEY=${{ secrets.VUE_APP_OPEN_CAGE_API_KEY }}" >> $GITHUB_ENV
          fi

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Build project
        run: |
          if [ "${{ github.ref_name }}" = "master" ]; then
            npm run build-prod
          elif [ "${{ github.ref_name }}" = "dev" ]; then
            npm run build-staging
          else
            npm run build-staging
          fi

      - name: Determine archive name
        id: determine_name
        run: |
          if [ "${{ github.ref_name }}" = "master" ]; then
            echo "ARCHIVE_NAME=restat-prod.zip" >> $GITHUB_ENV
            echo "ENV_SUFFIX=.prod" >> $GITHUB_ENV
          elif [ "${{ github.ref_name }}" = "dev" ]; then
            echo "ARCHIVE_NAME=restat-staging.zip" >> $GITHUB_ENV
            echo "ENV_SUFFIX=.dev" >> $GITHUB_ENV
          else
            echo "ARCHIVE_NAME=restat-staging.zip" >> $GITHUB_ENV
            echo "ENV_SUFFIX=.dev" >> $GITHUB_ENV
          fi

      - name: Set version
        id: set_version
        run: |
          # Determine the manifest file based on the ENV_SUFFIX
          MANIFEST_FILE="./src/manifest"${{ env.ENV_SUFFIX }}".json"
          VERSION=$(node -p "require('${MANIFEST_FILE}').version")
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Archive dist folder
        run: zip -r ${{ env.ARCHIVE_NAME }} dist

      - name: Get latest release
        id: get_release
        uses: actions/github-script@v6
        with:
          script: |
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            if (releases.length === 0) {
              return { upload_url: '' };
            }

            const version = process.env.VERSION;
            const release = releases.find(release => release.tag_name === `v${version}`);

            if (!release) {
              console.log('No published releases found.');
              return { upload_url: '' };
            }

            core.setOutput("upload_url", release.upload_url);
            core.setOutput("release_id", release.id);

      - name: Create a new release (if none exists)
        id: create_release
        if: ${{ steps.get_release.outputs.upload_url == '' }}
        uses: actions/github-script@v6
        with:
          script: |
            const version = process.env.VERSION;
            const newRelease = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${version}`,
              name: `Release v${version}`
            });

            core.setOutput("upload_url", newRelease.data.upload_url);
            core.setOutput("release_id", newRelease.data.id);

      - name: Check existing assets
        id: check_assets
        if: ${{ steps.get_release.outputs.upload_url != '' }}
        uses: actions/github-script@v6
        with:
          script: |
            const releaseId = '${{ steps.get_release.outputs.release_id }}';
            const { data: assets } = await github.rest.repos.listReleaseAssets({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: releaseId
            });

            const existingAsset = assets.find(asset => asset.name === '${{ env.ARCHIVE_NAME }}');
            core.setOutput("existing_asset", existingAsset ? 'true' : 'false' );

      - name: Delete existing asset
        if: ${{ steps.check_assets.outputs.existing_asset == 'true' }}
        uses: actions/github-script@v6
        with:
          script: |
            const releaseId = '${{ steps.get_release.outputs.release_id }}';
            const { data: assets } = await github.rest.repos.listReleaseAssets({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: releaseId
            });

            const assetId = assets.find(asset => asset.name === '${{ env.ARCHIVE_NAME }}').id;
            await github.rest.repos.deleteReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              asset_id: assetId
            });

      - name: Upload dist to release
        if: ${{ steps.get_release.outputs.upload_url != '' || steps.create_release.outputs.upload_url != '' }}
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url || steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.ARCHIVE_NAME }}
          asset_name: ${{ env.ARCHIVE_NAME }}
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
